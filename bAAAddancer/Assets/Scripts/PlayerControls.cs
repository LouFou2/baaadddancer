//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""DanceControls"",
            ""id"": ""e38dc9af-913d-4df1-a536-849fdbfe3593"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e7d64aa6-6835-4c27-bd61-6c4fd737f393"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boop"",
                    ""type"": ""Button"",
                    ""id"": ""e3034d1f-5f38-40f2-8659-532daec9db47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchObject"",
                    ""type"": ""Button"",
                    ""id"": ""b6d27f35-8cff-4a52-81f2-2108a692175f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f940430-de04-44de-92ec-e2639b9d485d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b6e001e-67f3-4d80-b8ea-dbd64fafd566"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""902b0810-a483-4777-bd9a-8b8e5399c8b8"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69295f4a-ade5-4005-b573-b1495402452a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2988367c-6335-42f4-a285-0552e5272e00"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8224df10-41b7-4ea9-82fa-acbd076f5c87"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e44b3c0-a91b-433e-b9a9-5f4f522d2ce5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DanceControls
        m_DanceControls = asset.FindActionMap("DanceControls", throwIfNotFound: true);
        m_DanceControls_Move = m_DanceControls.FindAction("Move", throwIfNotFound: true);
        m_DanceControls_Boop = m_DanceControls.FindAction("Boop", throwIfNotFound: true);
        m_DanceControls_SwitchObject = m_DanceControls.FindAction("SwitchObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DanceControls
    private readonly InputActionMap m_DanceControls;
    private List<IDanceControlsActions> m_DanceControlsActionsCallbackInterfaces = new List<IDanceControlsActions>();
    private readonly InputAction m_DanceControls_Move;
    private readonly InputAction m_DanceControls_Boop;
    private readonly InputAction m_DanceControls_SwitchObject;
    public struct DanceControlsActions
    {
        private @PlayerControls m_Wrapper;
        public DanceControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_DanceControls_Move;
        public InputAction @Boop => m_Wrapper.m_DanceControls_Boop;
        public InputAction @SwitchObject => m_Wrapper.m_DanceControls_SwitchObject;
        public InputActionMap Get() { return m_Wrapper.m_DanceControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DanceControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDanceControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DanceControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DanceControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Boop.started += instance.OnBoop;
            @Boop.performed += instance.OnBoop;
            @Boop.canceled += instance.OnBoop;
            @SwitchObject.started += instance.OnSwitchObject;
            @SwitchObject.performed += instance.OnSwitchObject;
            @SwitchObject.canceled += instance.OnSwitchObject;
        }

        private void UnregisterCallbacks(IDanceControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Boop.started -= instance.OnBoop;
            @Boop.performed -= instance.OnBoop;
            @Boop.canceled -= instance.OnBoop;
            @SwitchObject.started -= instance.OnSwitchObject;
            @SwitchObject.performed -= instance.OnSwitchObject;
            @SwitchObject.canceled -= instance.OnSwitchObject;
        }

        public void RemoveCallbacks(IDanceControlsActions instance)
        {
            if (m_Wrapper.m_DanceControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDanceControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DanceControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DanceControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DanceControlsActions @DanceControls => new DanceControlsActions(this);
    public interface IDanceControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoop(InputAction.CallbackContext context);
        void OnSwitchObject(InputAction.CallbackContext context);
    }
}
